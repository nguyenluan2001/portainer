/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ContainersIndexRouteImport } from './routes/containers/index'
import { Route as ContainersContainerIdRouteRouteImport } from './routes/containers/$containerId/route'
import { Route as ContainersContainerIdIndexRouteImport } from './routes/containers/$containerId/index'
import { Route as ContainersContainerIdExecRouteImport } from './routes/containers/$containerId/exec'
import { Route as ContainersContainerIdAttachRouteImport } from './routes/containers/$containerId/attach'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersIndexRoute = ContainersIndexRouteImport.update({
  id: '/containers/',
  path: '/containers/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainersContainerIdRouteRoute =
  ContainersContainerIdRouteRouteImport.update({
    id: '/containers/$containerId',
    path: '/containers/$containerId',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContainersContainerIdIndexRoute =
  ContainersContainerIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ContainersContainerIdRouteRoute,
  } as any)
const ContainersContainerIdExecRoute =
  ContainersContainerIdExecRouteImport.update({
    id: '/exec',
    path: '/exec',
    getParentRoute: () => ContainersContainerIdRouteRoute,
  } as any)
const ContainersContainerIdAttachRoute =
  ContainersContainerIdAttachRouteImport.update({
    id: '/attach',
    path: '/attach',
    getParentRoute: () => ContainersContainerIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/containers/$containerId': typeof ContainersContainerIdRouteRouteWithChildren
  '/containers': typeof ContainersIndexRoute
  '/containers/$containerId/attach': typeof ContainersContainerIdAttachRoute
  '/containers/$containerId/exec': typeof ContainersContainerIdExecRoute
  '/containers/$containerId/': typeof ContainersContainerIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/containers': typeof ContainersIndexRoute
  '/containers/$containerId/attach': typeof ContainersContainerIdAttachRoute
  '/containers/$containerId/exec': typeof ContainersContainerIdExecRoute
  '/containers/$containerId': typeof ContainersContainerIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/containers/$containerId': typeof ContainersContainerIdRouteRouteWithChildren
  '/containers/': typeof ContainersIndexRoute
  '/containers/$containerId/attach': typeof ContainersContainerIdAttachRoute
  '/containers/$containerId/exec': typeof ContainersContainerIdExecRoute
  '/containers/$containerId/': typeof ContainersContainerIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/containers/$containerId'
    | '/containers'
    | '/containers/$containerId/attach'
    | '/containers/$containerId/exec'
    | '/containers/$containerId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/containers'
    | '/containers/$containerId/attach'
    | '/containers/$containerId/exec'
    | '/containers/$containerId'
  id:
    | '__root__'
    | '/'
    | '/containers/$containerId'
    | '/containers/'
    | '/containers/$containerId/attach'
    | '/containers/$containerId/exec'
    | '/containers/$containerId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContainersContainerIdRouteRoute: typeof ContainersContainerIdRouteRouteWithChildren
  ContainersIndexRoute: typeof ContainersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/': {
      id: '/containers/'
      path: '/containers'
      fullPath: '/containers'
      preLoaderRoute: typeof ContainersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/$containerId': {
      id: '/containers/$containerId'
      path: '/containers/$containerId'
      fullPath: '/containers/$containerId'
      preLoaderRoute: typeof ContainersContainerIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/containers/$containerId/': {
      id: '/containers/$containerId/'
      path: '/'
      fullPath: '/containers/$containerId/'
      preLoaderRoute: typeof ContainersContainerIdIndexRouteImport
      parentRoute: typeof ContainersContainerIdRouteRoute
    }
    '/containers/$containerId/exec': {
      id: '/containers/$containerId/exec'
      path: '/exec'
      fullPath: '/containers/$containerId/exec'
      preLoaderRoute: typeof ContainersContainerIdExecRouteImport
      parentRoute: typeof ContainersContainerIdRouteRoute
    }
    '/containers/$containerId/attach': {
      id: '/containers/$containerId/attach'
      path: '/attach'
      fullPath: '/containers/$containerId/attach'
      preLoaderRoute: typeof ContainersContainerIdAttachRouteImport
      parentRoute: typeof ContainersContainerIdRouteRoute
    }
  }
}

interface ContainersContainerIdRouteRouteChildren {
  ContainersContainerIdAttachRoute: typeof ContainersContainerIdAttachRoute
  ContainersContainerIdExecRoute: typeof ContainersContainerIdExecRoute
  ContainersContainerIdIndexRoute: typeof ContainersContainerIdIndexRoute
}

const ContainersContainerIdRouteRouteChildren: ContainersContainerIdRouteRouteChildren =
  {
    ContainersContainerIdAttachRoute: ContainersContainerIdAttachRoute,
    ContainersContainerIdExecRoute: ContainersContainerIdExecRoute,
    ContainersContainerIdIndexRoute: ContainersContainerIdIndexRoute,
  }

const ContainersContainerIdRouteRouteWithChildren =
  ContainersContainerIdRouteRoute._addFileChildren(
    ContainersContainerIdRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContainersContainerIdRouteRoute: ContainersContainerIdRouteRouteWithChildren,
  ContainersIndexRoute: ContainersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
